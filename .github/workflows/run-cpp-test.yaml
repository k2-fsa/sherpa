# Copyright      2022  Xiaomi Corp.       (author: Fangjun Kuang)

# See ../../LICENSE for clarification regarding multiple authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Run C++ tests

on:
  push:
    branches:
      - master
  pull_request:
    types: [labeled]

jobs:
  run_cpp_tests:
    if: github.event.label.name == 'ready' || github.event.label.name == 'cpp' || github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        torch: ["1.10.0", "1.6.0"]
        python-version: ["3.7", "3.8", "3.9"]
        build_type: ["Release", "Debug"]
        exclude:
          - torch: "1.6.0"
            python-version: "3.9"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display gcc version
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          gcc --version

      - name: Display clang version
        if: startsWith(matrix.os, 'macos')
        run: |
          clang --version

      - name: Install PyTorch ${{ matrix.torch }}
        shell: bash
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install wheel twine typing_extensions
          python3 -m pip install torch==${{ matrix.torch }} numpy -f https://download.pytorch.org/whl/cpu/torch_stable.html

          python3 -m pip install k2==1.17.dev20220813+cpu.torch${{ matrix.torch }} -f https://k2-fsa.org/nightly/index.html

          python3 -m torch.utils.collect_env

      - name: Install PyTorch ${{ matrix.torch }}
        shell: bash
        if: startsWith(matrix.os, 'macos')
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install wheel twine typing_extensions
          python3 -m pip install torch==${{ matrix.torch }} numpy -f https://download.pytorch.org/whl/cpu/torch_stable.html

          python3 -m pip install k2==1.17.dev20220813+cpu.torch${{ matrix.torch }} -f https://k2-fsa.org/nightly/index.html

          python3 -m torch.utils.collect_env

      - name: Cache kaldifeat
        id: my-cache-2
        uses: actions/cache@v2
        with:
          path: |
            ~/tmp/kaldifeat
          key: cache-tmp-${{ matrix.python-version }}-${{ matrix.os }}-${{ matrix.torch }}

      - name: Install kaldifeat
        if: steps.my-cache-2.outputs.cache-hit != 'true'
        shell: bash
        run: |
          .github/scripts/install-kaldifeat.sh

      - name: Build sherpa
        shell: bash
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          export KALDIFEAT_INSTALL_PREFIX=$HOME/tmp/kaldifeat/build
          echo $KALDIFEAT_INSTALL_PREFIX
          ls -lh $KALDIFEAT_INSTALL_PREFIX

          echo "Build type: $BUILD_TYPE"

          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
          make -j VERBOSE=1

          ls -lh lib
          ls -lh bin

      - name: Display dependencies
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          cd build

          ldd lib/libsherpa_core.so

          ldd bin/sherpa

      - name: Display dependencies
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          cd build

          otool -L lib/libsherpa_core.dylib
          otool -l lib/libsherpa_core.dylib

          otool -L bin/sherpa
          otool -l bin/sherpa

      - name: Test sherpa
        shell: bash
        run: |
          cd build
          # test_log
          SHERPA_LOG_LEVEL=TRACE ./bin/test_log
          SHERPA_LOG_LEVEL=DEBUG ./bin/test_log
          SHERPA_LOG_LEVEL=INFO ./bin/test_log
          SHERPA_LOG_LEVEL=WARNING ./bin/test_log
          SHERPA_LOG_LEVEL=ERROR ./bin/test_log

          ./bin/sherpa

          ctest --verbose --output-on-failure -E py # exclude Python tests
