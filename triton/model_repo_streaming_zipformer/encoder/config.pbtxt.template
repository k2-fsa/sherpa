# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "encoder"
backend: "onnxruntime"
default_model_filename: "encoder.onnx"

max_batch_size: MAX_BATCH

sequence_batching{
    max_sequence_idle_microseconds: 5000000
    oldest {
      max_candidate_sequences: 1024
      max_queue_delay_microseconds: 5000
    }
    control_input [
    ]
    state [
    {
      input_name: "attn_cache"
      output_name: "new_attn_cache"
      data_type: TYPE_FP16
      dims: [ ENCODER_LEFT_CONTEXT, ENCODER_LAYERS_3X, ENCODER_DIM_HALF ]
      initial_state: {
       data_type: TYPE_FP16
       dims: [ ENCODER_LEFT_CONTEXT, ENCODER_LAYERS_3X, ENCODER_DIM_HALF ]
       zero_data: true
       name: "initial state"
      }
    },
    {
      input_name: "cnn_cache"
      output_name: "new_cnn_cache"
      data_type: TYPE_FP16
      dims: [ ENCODER_LAYERS_2X, ENCODER_DIM , CNN_MODULE_KERNEL_MINUS_ONE]
      initial_state: {
       data_type: TYPE_FP16
       dims: [ ENCODER_LAYERS_2X, ENCODER_DIM , CNN_MODULE_KERNEL_MINUS_ONE]
       zero_data: true
       name: "initial state"
      }
    },

       {
      input_name: "avg_cache"
      output_name: "new_avg_cache"
      data_type: TYPE_FP16
      dims: [ ENCODER_LAYERS, ENCODER_DIM ]
      initial_state: {
       data_type: TYPE_FP16
       dims: [ ENCODER_LAYERS, ENCODER_DIM ]
       zero_data: true
       name: "initial state"
      }
    },

    {
      input_name: "len_cache"
      output_name: "new_len_cache"
      data_type: TYPE_INT64
      dims: [ ENCODER_LAYERS ]
      initial_state: {
       data_type: TYPE_INT64
       dims: [ ENCODER_LAYERS ]
       zero_data: true
       name: "initial state"
      }
    }
  ]
}
input [
  {
    name: "x"
    data_type: TYPE_FP16
    dims: [-1, 80]
  },
  {
    name: "x_lens"
    data_type: TYPE_INT64
    dims: [ 1 ]
    reshape: { shape: [] }
  }
]
output [
  {
    name: "encoder_out"
    data_type: TYPE_FP16
    dims: [-1, -1]
  },
  {
    name: "encoder_out_lens"
    data_type: TYPE_INT64
    dims: [1]
    reshape: { shape: [] }
  }
]
instance_group [
    {
      count: ENCODER_INSTANCE_NUM
      kind: KIND_GPU
    }
]