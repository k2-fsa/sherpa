# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "scorer"
backend: "python"
max_batch_size: MAX_BATCH

sequence_batching{
    max_sequence_idle_microseconds: 5000000
    oldest {
      max_candidate_sequences: 1024
    }
    control_input [
        {
            name: "START",
            control [
                {
                    kind: CONTROL_SEQUENCE_START
                    fp32_false_true: [0, 1]
                }
            ]
        },
        {
            name: "READY"
            control [
                {
                    kind: CONTROL_SEQUENCE_READY
                    fp32_false_true: [0, 1]
                }
            ]
        },
        {
            name: "CORRID",
            control [
                {
                    kind: CONTROL_SEQUENCE_CORRID
                    data_type: TYPE_UINT64
                }
            ]
        },
        {
            name: "END",
            control [
                {
                    kind: CONTROL_SEQUENCE_END
                    fp32_false_true: [0, 1]
                }
            ]
        }
    ]
}


parameters [
  {
    key: "context_size",
    value: { string_value: "DECODER_CONTEXT_SIZE"}
  },
  {
    key: "tokenizer_file",
    value: { string_value: "TOKENIZER_FILE"}
  },
  {
   key: "FORCE_CPU_ONLY_INPUT_TENSORS", 
   value: {string_value:"yes"}
  },
  {
    key: "decoding_method",
    value: { string_value: "greedy_search"} # fast_beam_search
  },
  {
    key: "beam",
    value: { string_value: "4"}
  },
  {
    key: "max_contexts",
    value: { string_value: "4"}
  },
  {
    key: "max_states",
    value: { string_value: "32"}
  },
  {
    key: "temperature",
    value: { string_value: "1.0"}
  }
]


input [
  {
    name: "encoder_out"
    data_type: TYPE_FP16
    dims: [-1, ENCODER_DIM]
  },
  {
    name: "encoder_out_lens"
    data_type: TYPE_INT64
    dims: [1]
    reshape: { shape: [ ] }
  }
]

output [
  {
    name: "OUTPUT0"
    data_type: TYPE_STRING
    dims: [1]
  }
]

instance_group [
    {
      count: SCORER_INSTANCE_NUM
      kind: KIND_CPU
    }
  ]
